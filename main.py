import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

# алгоритм: НС Кохонена
# исходные кластеризуемые данные: выборка лицеев г. Москвы. Координаты местоположения (X, Y)
# p: принадлежность округу Москвы (евклидово расстояние до координат (X0, Y0) центра округа)

# 1. Лицей "Ломоносов" Аминьевское ш., 18, корп. 4, стр. 4 55.714470, 37.456001
# 2. Университетский лицей № 1511 предуниверситария НИЯУ МИФИ  Пролетарский проспект, 6к3  55.648175, 37.652309
# 3. НИУ ВШЭ, Лицей  ул. Солянка, 14А, стр. 1 55.752301, 37.637432
# 4. Французский лицей при Посольстве Франции 1-й Спасоналивковский пер., 12 55.733662, 37.615895
# 5. Лицей Московского международного университета Ленинградский просп., 17 55.782102, 37.570236
# 6. Лицей Вторая школа имени В. Ф. Овчинникова ул. Фотиевой, 18 55.697996, 37.556392
# 7. Лицей им. С. Н. Нюберг Большая Черёмушкинская ул., 25, стр. 25 55.676316, 37.581743
# 8. Лицей духовной культуры во имя преподобного Серафима Саровского  3-я Парковая ул., 34А 55.800413, 37.783522
# 9. МАОУ Лицей г. Реутов Южная улица, 8 55.747910, 37.860321

data2 = {
    'номер': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21],
    'наименование':
        [
            'Лицей "Ломоносов"',
             'Университетский лицей № 1511 предуниверситария НИЯУ МИФИ',
             'НИУ ВШЭ, Лицей',
             'Французский лицей при Посольстве Франции',
             'Лицей Московского международного университета',
             'Лицей Вторая школа имени В. Ф. Овчинникова',
             'Лицей им. С. Н. Нюберг',
             'Лицей духовной культуры во имя преподобного Серафима Саровского', 'МАОУ Лицей г. Реутов',
             'Инновационно-технологический лицей',
             'МБОУ Лицей № 15',
             'Химкинский лицей',
             'Лицей № 21 г. Химки',
             'АНОО Физтех-лицей им. П. Л. Капицы',
             'Воробьевы горы, корпус № 6',
             'Лицей Перспектива',
             'ГБОУ МО Одинцовский Десятый лицей',
             'Горчаковский лицей МГИМО, Одинцовский филиал',
             'МБОУ Немчиновский лицей',
             'Демиховский Лицей филиал Красно-Дубравский',
             'Лицей № 7 г. Электросталь'
         ],
    'адрес':
        [
            'Аминьевское ш., 18, корп. 4, стр. 4',
            'Пролетарский проспект, 6к3',
            'ул. Солянка, 14А, стр. 1',
            '1-й Спасоналивковский пер., 12',
            'Ленинградский просп., 17',
            'ул. Фотиевой, 18',
            'Большая Черёмушкинская ул., 25, стр. 25',
            '3-я Парковая ул., 34А', 'Южная улица, 8',
            'Центральная ул., 55, д. Глухово',
            '2-я Институтская ул., 2, Мытищи',
            'улица Машинцева, 6',
            '2-й Чапаевский переулок, 3А',
            'Лётная улица, 7',
            'Новоясеневский проспект, 30к3',
            'сельское поселение Булатниковское',
            'бульвар Любы Новосёловой, 8',
            'Новоспортивная улица, 3',
            'улица Агрохимиков, 1',
            'деревня Красная Дубрава, 57',
            'Комсомольская улица, 4А'
        ],
    'координаты':
        [
            '55.714470, 37.456001',
            '55.648175, 37.652309',
            '55.752301, 37.637432',
            '55.733662, 37.615895',
            '55.782102, 37.570236',
            '55.697996, 37.556392',
            '55.676316, 37.581743',
            '55.800413, 37.783522',
            '55.747910, 37.860321',
            '55.770905, 37.251195',
            '55.929845, 37.785275',
            '55.890003, 37.408313',
            '55.947391, 37.293796',
            '55.931442, 37.500892',
            '55.602527, 37.534976',
            '55.525515, 37.661097',
            '55.679620, 37.253140',
            '55.680618, 37.277286',
            '55.703136, 37.361289',
            '55.784076, 38.815781',
            '55.802054, 38.475518'
        ]
}

df = pd.DataFrame(data2)
print(pd.DataFrame(data2).to_string())

df['номер'] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]
df['координаты'] = df['координаты'].str.split(', ')
df['x'] = df['координаты'].apply(lambda x: float(x[0]))
df['y'] = df['координаты'].apply(lambda x: float(x[1]))

coordinates_array = df[['x', 'y', 'номер']].values

# Задаем исходные данные (координаты местоположения и принадлежность к округу)
data = np.array(coordinates_array, dtype=float)

print("\nЗадаем исходные данные (координаты местоположения и принадлежность к округу)")
print(data)

# Центры округов Москвы

print("\nЦентры округов Москвы")
district_centers = {}
for index, row in df.iterrows():
    district_centers[row['номер']] = [row['x'], row['y']]
    print(f"{index+1}: {district_centers[row['номер']]}")

# Нормализуем данные
print("\nНормализуем данные")
data[:, :2] = (data[:, :2] - data[:, :2].min(axis=0)) / (data[:, :2].max(axis=0) - data[:, :2].min(axis=0))
if np.any(data[:, :2].max(axis=0) - data[:, :2].min(axis=0) == 0):
    raise ValueError("Невозможно нормализовать данные из-за нулевого диапазона")
print(data)

# Инициализируем веса случайным образом
weights = np.random.rand(3, 2)

# Обучение сети
learning_rate = 0.3
epochs = 15

print("\nОбучение сети")
print(f"норма обучения: {learning_rate}")
print(f"количество эпох: {epochs}")

# Сохранение ошибок
errors = []

# Функция Competitive Learning для обучения нейронной сети
def competitive_learning(data, num_neurons, learning_rate, epochs):
    # Инициализация весов нейронов
    weights = np.random.rand(num_neurons, data.shape[1])

    # Создаем DataFrame для хранения результатов
    results = pd.DataFrame(columns=['Эпоха', 'Вес', 'Ошибка', 'Общая ошибка кластеризации'])

    total_clustering_error = 0.0  # Инициализация общей ошибки кластеризации

    for epoch in range(epochs):
        for sample in data:
            # Нахождение победившего нейрона
            distances = np.linalg.norm(weights - sample, axis=1)
            winner_neuron = np.argmin(distances)

            # Обновление весов победившего нейрона
            weights[winner_neuron] += learning_rate * (sample - weights[winner_neuron])

        # Вычисление ошибки после каждой эпохи
        error = np.mean(np.min(np.linalg.norm(weights - data[:, np.newaxis], axis=2), axis=1))
        total_clustering_error += error  # Обновляем общую ошибку кластеризации

        # Сохраняем значения номера эпохи, веса и ошибки в DataFrame
        results.loc[len(results)] = [epoch, weights.copy(), round(error, 3), round(total_clustering_error, 3)]

    # Кластеризация данных на основе обученных нейронов
    clusters = []
    for sample in data:
        distances = np.linalg.norm(weights - sample, axis=1)
        cluster = np.argmin(distances)
        clusters.append(round(cluster, 3))

    # Создаем DataFrame для хранения данных о кластерах
    cluster_data = pd.DataFrame(data=data, columns=[f'Характеристика_{i}' for i in range(data.shape[1])])
    cluster_data['Кластер'] = clusters

    # Заменяем названия столбцов на требуемые параметры
    cluster_data = cluster_data.rename(columns={'Характеристика_0': 'Координата x', 'Характеристика_1': 'Координата y', 'Характеристика_2': 'Номер'})

    return results, weights, cluster_data

# Обучение нейронной сети
results, trained_weights, clusters = competitive_learning(data, len(weights), learning_rate, epochs)
print(results.to_string())
print(clusters.to_string())

# График точек с принадлежностью к кластерам
import matplotlib.pyplot as plt

# Создаем цветовую карту для кластеров
colors = {0: 'red', 1: 'blue', 2: 'green'}  # Добавьте нужные цвета для каждого кластера

# Строим график точек с принадлежностью к кластерам
plt.figure(figsize=(8, 6))
for cluster in clusters['Кластер'].unique():
    plt.scatter(clusters[clusters['Кластер'] == cluster]['Координата x'],
                clusters[clusters['Кластер'] == cluster]['Координата y'],
                color=colors[cluster], label=f'Кластер {cluster}')

plt.xlabel('Координата x')
plt.ylabel('Координата y')
plt.title('График точек с принадлежностью к кластерам')
plt.legend()
# plt.colorbar(label='Кластер') # добавляем цветовую шкалу для кластеров
plt.grid(True)
plt.show()

# Создаем список номеров эпох
# epochs = list(range(1, len(errors) + 1))

# # Построение графика зависимости ошибки от номера эпохи
# plt.figure(figsize=(8, 6))
# plt.plot(epochs, errors, marker='o', color='b', linestyle='-')
# plt.xlabel('Номер эпохи')
# plt.ylabel('Ошибка')
# plt.title('График зависимости ошибки от номера эпохи')
# plt.grid(True)
# plt.show()

